from torch.utils.data import Dataset
import torch, pandas as pd
from pretty_midi_tensor import PrettyMIDITensor
import logging, os, pretty_midi


class MidiDataset(Dataset):
    """This class converts midi files to tensors. It takes in a CSV file generated by the midi_to_csv.py script."""

    def __init__(
        self,
        csv_file: str,
        path_to_midi: str,
        logger: logging.Logger = logging.getLogger(name="MidiDataset"),
    ):
        """
        Args:
            csv_file (string): Path to the csv file with the midi files and their metadata.
        """
        logging.info(f"Started MidiDataset with csv file {csv_file}")
        self.csv_file = csv_file
        self.path_to_midi = path_to_midi
        self._logger = logging
        self.midi_data = pd.read_csv(csv_file, delimiter=",")

        self.pretty_midi_tensor_converter = PrettyMIDITensor(logging)

    def __len__(self):
        return len(self.midi_data)

    def __getitem__(self, idx):
        # Get midi item
        item = self.midi_data["new_midi_file_name"]
        # print(item.keys())
        # exit()
        item = item[idx]
        # Join
        path = os.path.join(self.path_to_midi, item)

        # Open using pretty midi
        pretty_mid = pretty_midi.PrettyMIDI(path)
        # Get the tensor
        return self.pretty_midi_tensor_converter.pretty_midi_to_tensor(pretty_mid, item)


# print(MidiDataset(os.path.join(os.path.__file__,os.path.abspath("../data/index.csv")),os.path.join(os.path.__file__,os.path.abspath("../data/processed/")))[0])
